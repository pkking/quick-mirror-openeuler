#!/usr/bin/python
# -*- coding: utf-8 -*-
from __future__ import print_function, division

# quick-fedora-hardlink uses the the fullfiletimelist files present in the
# Fedora repository, as well as some specific properties of the structure of
# the Fedora repository, to "quickly" hardlink identical files in that
# repository.

# In the Fedora repository, all files which are hardlinked also have exactly
# the same names.  We also know that all files should have the same
# permissions, and so we don't need to check them.
#
# The specific property it uses is the fact that all hardlinked files will have
# the same name.

# Generally, quick-fedora-mirror will maintain hardlinks as they are present on
# the master mirror.  However, there are situations where it won't:
# * If a module is added without backdating.
# * If files need to be retransferred for any reason.
# * If the file lists on the master aren't generated for each crosslinked
#   module together when linking occurs.

import argparse
import os
import re
import sys
import tempfile


class g:
    pass


def options_parse():
    p = argparse.ArgumentParser(
        description='Using the file lists, quickly hardlink'
        'identical files in the mirrored repositories.')

    p.add_argument('-c', '--config', help='Path to the configuration file.')
    p.add_argument('-d', '--debug', help='Debug level.')
    p.add_argument('-n', '--dry-run', action='store_true',
                   help='Just print what would be done without linking anything.')
    p.add_argument('-p', '--progress', action='store_true',
                   help='Show progress information on stderr.')

    opts = p.parse_args()

    # Check that config file is readable.
    if opts.config and not os.access(opts.config, os.R_OK):
        print('Cannot open provided config file {}'.format(opts.config), file=sys.stderr)
        sys.exit(1)

    if not opts.config:
        for i in ('/etc/quick-fedora/mirror.conf',
                  os.path.expanduser('~/.config/quick-fedora-mirror.conf'),
                  '{}/quick-fedora-mirror.conf'.format(os.path.dirname(__file__)),
                  './quick-fedora-mirror.conf'):
            if os.access(i, os.R_OK):
                opts.config = i
                break
        else:
            print('Could not find a readable configuration file.', file=sys.stderr)
            sys.exit(1)

    opts.filelist = 'fullfiletimelist-$mdir'

    return opts


def config_read(opts):
    """Read the configuration file.

    We really only want DESTD and FILELIST
    The value is stored in the existing options array.
    """
    with open(opts.config) as cf:
        for line in cf:
            m = re.search('^\s*DESTD=(\S+)', line)
            if m:
                opts.destd = m.group(1)

            m = re.search('^\s*FILELIST=(\S+)', line)
            if m:
                opts.filelist = m.group(1)


def config_check(opts):
    if not opts.destd:
        print('Cannot find value for DESTD.  Exiting.', file=sys.stderr)
        sys.exit(1)
    d = opts.destd
    if not os.path.isdir(d):
        print('{} is not a directory.  Exiting.'.format(d), file=sys.stderr)
        sys.exit(1)
    if not os.access(d, os.R_OK | os.X_OK):
        print('{} is not accessible.  Exiting.'.format(d), file=sys.stderr)
        sys.exit(1)


def skip_to_files(f):
    for line in f:
        if re.search('^\[Files', line):
            return True

    return False


def process_one_filelist(filelist, module, candidates):
    with open(filelist) as f:
        skip_to_files(f)

        for line in f:
            line = line.strip()
            if not len(line):
                break
            fields = line.split('\t')
            if fields[1] != 'f':
                continue

            size = fields[2]
            pathname = fields[3]
            filename = os.path.basename(pathname)
            key = filename + size
            # Not using os.path.join because it's slow
            p = module + '/' + pathname
            if key in candidates:
                candidates[key].append(p)
            else:
                candidates[key] = [p]


def trim_candidates(candidates):
    remove = [k for k in candidates if len(candidates[k]) == 1]
    for k in remove:
        del candidates[k]


def generate_candidates(filelist='fullfiletimelist-$mdir'):
    """Process filelists in the current directory.

    Looks for all filelists in the current directory and processes them all.
    """
    candidates = {}

    for module in os.listdir('.'):
        if not os.path.isdir(module) or not os.access(module, os.R_OK | os.X_OK):
            continue

        fl = os.path.join(module, filelist.replace('$mdir', module))
        if not os.path.isfile(fl):
            continue

        print('  {}'.format(fl))
        process_one_filelist(fl, module, candidates)

    return candidates


def files_differ(f1, f2):
    """Lifted from the inner comparison of filecmp.py.

    The rest of filecmp.py isn't useful, and results in too many stat calls for
    our purposes.
    """
    bufsize = 8 * 1024
    # print('\rCompare {}, {}'.format(f1, f2))
    with open(f1, 'rb') as fp1, open(f2, 'rb') as fp2:
        while True:
            b1 = fp1.read(bufsize)
            b2 = fp2.read(bufsize)
            if b1 != b2:
                return True
            if not b1:
                return False


def do_hardlink(target, link):
    """Take two existing files and ensure that they are hardlinked.

    Note that this will happen regardless of whether or not the files are
    identical, so 'link' will be destroyed if it is not identical to 'target'.
    Do any needed comparisons first.
    """
    linkdir = os.path.dirname(link)
    (tfh, tmp) = tempfile.mkstemp(dir=linkdir)
    os.close(tfh)

    # Move the candidate file out of the way.
    try:
        os.rename(link, tmp)
    except os.error:
        print('Could not rename {} to {}.  Aborting.'.format(link, tmp), file=sys.stderr)
        os.remove(tmp)
        sys.exit(1)

    try:
        os.link(target, link)
    except os.error as e:
        print('Could not link from {} to {}: {}.\nTrying to undo the rename.'.format(link, target, e),
            file=sys.stderr)
        try:
            os.rename(tmp, link)
        except os.error as e:
            print('Cound not rename {} to {}: {}.  You will need to fix things up manually.'.format(
                tmp, link, e), file=sys.stderr)
            sys.exit(1)

        print('Undid the rename.', file=sys.stderr)
        sys.exit(1)

    try:
        os.remove(tmp)
    except os.error as e:
        print('Cound not remove tempfile {}: {}.'.format(tmp, e), file=sys.stderr)
        sys.exit(1)


def process_one_candidate(target, l, skip=False):
    """Process a candidate tuple."""
    tstat = os.stat(target)
    for candidate in l:
        cstat = os.stat(candidate)

        # Compare inode
        if tstat.st_ino == cstat.st_ino:
            # debug that they're already linked
            continue

        # Compare contents
        if files_differ(target, candidate):
            # debug that the files differ
            continue

        if skip:
            print('\rWould hardlink {} and {}'.format(target, candidate))
            continue

        do_hardlink(target, candidate)
        print('\rHardlink {} and {}'.format(target, candidate))


def process_candidates(candidates, skip=False):
    total = len(candidates)
    count = 1
    for _, candidate in candidates.iteritems():
        target = candidate.pop(0)
        sys.stdout.write('\r[{:2.2%}] - {}'.format((count / total), target))
        sys.stderr.flush()
        process_one_candidate(target, candidate, skip=skip)
        count += 1


def main():
    opts = options_parse()
    config_read(opts)
    config_check(opts)
    os.chdir(opts.destd)
    print('Processing file lists in {}:'.format(opts.destd))
    c = generate_candidates(filelist=opts.filelist)
    trim_candidates(c)
    print('Found {} tuples of potentially hardlinkable files.'.format(len(c)))
    process_candidates(c, skip=opts.dry_run)
    print()


if __name__ == '__main__':
    main()
