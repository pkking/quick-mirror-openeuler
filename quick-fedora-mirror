#!/bin/zsh
LANG=C
# Simple script to grab the file list from Fedora and rsync everything that's
# changed since the last time we pulled.
#
# Originally written by Jason Tibbitts <tibbs@math.uh.edu> in 2016.
# Donated to the public domain.  If you require a statement of license, please
# consider this work to be licensed as "CC0 Universal", any version you choose.

# Variables in upper case are user configurables.

# Do this absolutely first
starttime=$(date +%s)
# Paranoia
starttime=$(($starttime-5))

# Utility functions

db1 () { (( VERBOSE >= 1 )) && echo $* }
db2 () { (( VERBOSE >= 2 )) && echo $* }
db3 () { (( VERBOSE >= 3 )) && echo '>>' $* }
db4 () { (( VERBOSE >= 4 )) && echo '>>>>' $* }
sep () { (( VERBOSE >= 2 )) && echo '============================================================' }

finish () {
    if (( $VERBOSE >= 1 )); then
        echo -n 'Mirror finished: '
        date
    fi
    exit 0
}

do_rsync () {
    # Options: source, destination.
    # The name of an array containing additional options.
    # If rsync fails, this will sleep with
    # exponential backoff ten times, and then will exit the script (not just
    # the function).
    local src=$1
    local dest=$2
    local opts=$3
    local sleep=1
    local log=rsync.log
    local errlog=rsync-error.log

    local -a verboseopts
    # These add to the default rsync verbosity
    (( VERBOSE >= 7 )) && verboseopts+=(--progress)
    (( VERBOSE >= 5 )) && verboseopts+=(-v)
    (( VERBOSE >= 4 )) && verboseopts+=(-v)

    # These remove from the default rsync verbosity
    (( VERBOSE <= 3 )) && verboseopts+=(--no-motd)
    (( VERBOSE == 0 )) && verboseopts+=(-q)

    while true; do
        # ZSHISM:  (P) flag to act on a variable by name.  Sadly, bash has
        # broken array handling.   bash 4.3 has local -n for this.  Older bash
        # needs hacks, or eval.  More info:
        # https://stackoverflow.com/questions/1063347/passing-arrays-as-parameters-in-bash
        # Or just use a freaking global.

        # Redirect to files based on VERBOSE
        # 0 - stdout and stderr redirected; dump stderr at end after ten tries
        # 1 - stdout redirected; stderr not redirected
        # 2 - Only some of stdout (the summary line at the end of the transfer)
        # 5 - Now start showing more output.  What to show?
        if (( VERBOSE >= 5 )); then
            db3 Calling $RSYNC $RSYNCOPTS $verboseopts ${(P)opts} $src $dest
            $RSYNC $RSYNCOPTS $verboseopts ${(P)opts} $src $dest
        elif (( VERBOSE >= 2 )); then
            db3 Calling $RSYNC $RSYNCOPTS $verboseopts ${(P)opts} $src $dest \>\> $log
            $RSYNC $RSYNCOPTS $verboseopts ${(P)opts} $src $dest >> $log
        elif (( VERBOSE == 1 )); then
            db3 Calling $RSYNC $RSYNCOPTS $verboseopts ${(P)opts} $src $dest \>\> $log 2\>\> $errlog
            $RSYNC $RSYNCOPTS $verboseopts ${(P)opts} $src $dest >> $log >> $log 2>> $errlog
        else
            db3 Calling $RSYNC $RSYNCOPTS $verboseopts ${(P)opts} $src $dest \>\> $log 2\>\> $errlog
            $RSYNC $RSYNCOPTS $verboseopts ${(P)opts} $src $dest >> $log >> $log 2>> $errlog
        fi
        rsyncreturn=$?

        (( rsyncreturn != 5 && rsyncreturn != 10 )) && break

        if [[ $VERBOSE -gt 1 && -f $errlog ]]; then
            (>&2 cat $errlog)
            rm $errlog
        fi

        db2 rsync failed: sleeping for $sleep
        sleep $sleep
        sleep=$(( sleep*2 ))
        if (( sleep > 1000 )); then
            (>&2 echo "Could not sync from $REMOTE/$module")
            [[ -f $errlog ]] && (>&2 cat $errlog)
            exit 1
        fi
    done

    # If we got here, we have a successful run.
}

# Parse args
while [[ $# > 0 ]]; do
    opt=$1
    case $opt in
        -a)
            alwayscheck=1
            ;;
        -c)
            cfgfile=$2
            shift
            if [[ ! -r $cfgfile ]]; then
                (>&2 echo Cannot read $cfgfile)
                exit 1
            fi
            ;;
        -d)
            verboseopt=$2
            shift
            ;;
        -n)
            skiprsync=1
            skipdelete=1
            ;;
        -N)
            skipdelete=1
            ;;
        -t)
            backdate=$2
            alwayscheck=1
            shift
            ;;
        -T)
            backdate=$(date -d "$2" +%s)
            alwayscheck=1
            shift
            ;;
        *)
            (>&2 echo "Unrecognized argument.")
            exit 1
            ;;
    esac
    shift
done

# Mapping from module names to directories under fedora-buffet
# ZSHISM (initialize associative array)
typeset -A MODULEMAPPING
MODULEMAPPING=(
    fedora-alt          alt
    fedora-archive      archive
    fedora-enchilada    fedora
    fedora-epel         epel
    fedora-secondary    fedora-secondary
    )

# Default arguments; override in quick-fedora-mirror.conf
VERBOSE=0

DESTD=
TIMEFILE=

REMOTE=rsync://dl.fedoraproject.org
FILELIST=fullfiletimelist

RSYNC=/usr/bin/rsync

rsyncver=$(rsync --version | head -1 | awk '{print $3}')
if [[ $rsyncver == 3.1* ]]; then
    RSYNCOPTS=(-aSH -f 'R .~tmp~' --preallocate --fuzzy --delete-delay --delay-updates)
else
    RSYNCOPTS=(-aSH -f 'R .~tmp~' --fuzzy --delete-delay --delay-updates)
fi

MASTERMODULE=fedora-buffet
MIRRORBUFFET=0
MODULES=(fedora-enchilada fedora-epel)

# Load up the configuration file
for file in $cfgfile /etc/quick-fedora-mirror.conf \
        ~/.config/quick-fedora-mirror.conf \
        $(dirname $0)/quick-fedora-mirror.conf \
        ./quick-fedora-mirror.conf; do
    if [[ -r $file ]]; then
        source $file
        break
    fi
done

# Override with the command-line option
[[ -n $verboseopt ]] && VERBOSE=$verboseopt

# Check that the required parameters were provided
if [[ -z $DESTD ]]; then
    (>&2 echo "You must define DESTD in your configuration file ($configfile).")
fi
if [[ -z $TIMEFILE ]]; then
    (>&2 echo "You must define TIMEFILE in your configuration file ($configfile).")
fi

# Find the previous mirror time, and backdate if necessary
LASTTIME=0
if [[ -r $TIMEFILE ]]; then
    source $TIMEFILE
fi
if [[ -n $backdate ]]; then
    LASTTIME=$backdate
fi

tempd=$(mktemp -d -t quick-mirror.XXXXXXXXXX)
trap "rm -rf $tempd" EXIT
cd $tempd

# Some startup output depending on selected verbosity.
if (( VERBOSE >= 1 )); then
    echo -n 'Mirror starting: '
    date
fi

if (( VERBOSE >= 6 )); then
    echo Times:
    echo LASTTIME=$LASTTIME
    echo starttime=$starttime
    echo TIMEFILE=$TIMEFILE
    echo Dirs:
    echo tempd=$tempd
    echo DESTD=$DESTD
    echo Rsync:
    echo REMOTE=$REMOTE
    echo MASTERMODULE=$MASTERMODULE
    echo RSYNC=$RSYNC
    echo RSYNCOPTS=$RSYNCOPTS
    echo Modules:
    echo MODULES=$MODULES
    echo MODULEMAPPING=$MODULEMAPPING
    echo
fi

(( VERBOSE >= 8 )) && set -x

if [[ $MIRRORBUFFET -ne '0' ]]; then
    # We want to mirror everything, so save the admin from listing the
    # individual modules.
    # ZSHISM (get keys from an associative array with (k))
    MODULES=(${(k)MODULEMAPPING})
fi

# We have to accumulate a big list of everything that needs to be
# transferred from all of the modules
for module in $MODULES; do
    sep
    db2 Processing $module

    # ZSHISM? (associative array indexing)
    moduledir=$MODULEMAPPING[$module]
    totallines=0

    # First fetch each filefiletimelist, and make one big transfer list from
    # all of them.  Copy in the old file from our repo to speed up rsync in case
    # most of it didn't change
    rm -f $FILELIST
    if [[ -f $DESTD/$moduledir/$FILELIST ]]; then
        cp -p $DESTD/$moduledir/$FILELIST .
        cp -p $DESTD/$moduledir/$FILELIST $FILELIST.old
        filelisttime=$(stat --format=%Y $FILELIST)
    fi

    do_rsync $REMOTE/$module/$FILELIST .

    if [[ -z $alwayscheck && $filelisttime == $(stat --format=%Y $FILELIST) ]]; then
        db2 No change in file list mtime.  Skipping $module.
        continue
    fi

    if (( VERBOSE >= 4 )); then
        echo "Changes in file list since last run:"
        diff -u $FILELIST.old $FILELIST
    fi

    db3 Extracting file and directory lists.

    # All files in the remote repository.
    awk "{if (\$2 == \"f\" || \$2 == \"l\") {print \"$moduledir/\" substr(\$0, 14)}}" < $FILELIST > allfiles-$module

    # All dirs in the remote repository.
    awk "{if (\$2 == \"d\") {print \"$moduledir/\" substr(\$0, 14)}}" < $FILELIST > alldirs-$module

    linecount=$(wc -l < allfiles-$module)
    linecount2=$(wc -l < alldirs-$module)
    db2 "Remote:      $linecount files, $linecount2 dirs."


    # Files on the server which changed since the last mirror
    awk "{if (\$1 >= $LASTTIME) {print \"$moduledir/\" substr(\$0, 14)}}" < $FILELIST > newfiles-$module

    # Dirs on the server which changed since the last mirror
    awk "{if (\$1 >= $LASTTIME && \$2 == \"d\") {print \"$moduledir/\" substr(\$0, 14)}}" < $FILELIST > newdirs-$module

    linecount=$(wc -l < newfiles-$module)
    linecount2=$(wc -l < newdirs-$module)
    db2 "New/Updated: $linecount files, $linecount2 dirs."

    echo $moduledir/$FILELIST >> newfiles-$module
    cat newfiles-$module >> master-transferlist
    cat newdirs-$module >> master-transferlist
    totallines=$((totallines+linecount+linecount2+1))

    if [[ -d $DESTD/$moduledir ]]; then
        db3 Generating local dir lists
        pushd $DESTD
        find $moduledir/* -type d > $tempd/localdirs-$module
        popd

        # Find dirs on the client which don't exist on the server
        sort alldirs-$module alldirs-$module localdirs-$module | uniq -u > deletedirs-$module
        cat deletedirs-$module >> master-deletedirs

        # Find dirs on the server which are missing on the client
        sort localdirs-$module localdirs-$module alldirs-$module | uniq -u > missingdirs-$module
        cat missingdirs-$module >> master-transferlist
        totallines=$((totallines+linecount))

        db3 Generating local file lists
        pushd $DESTD
        #db4 find $moduledir/* -type f -o -type l '>' $tempd/localfiles-$module
        find $moduledir/* -type f -o -type l > $tempd/localfiles-$module
        popd

        # Find files on the client which don't exist on the server
        sort allfiles-$module allfiles-$module localfiles-$module | uniq -u > deletefiles-$module
        cat deletefiles-$module >> master-deletefiles

        # Find files on the server which are missing on the client
        sort localfiles-$module localfiles-$module allfiles-$module | uniq -u > missingfiles-$module
        cat missingfiles-$module >> master-transferlist

        linecount=$(wc -l < localfiles-$module)
        linecount2=$(wc -l < localdirs-$module)
        db2 "Local:       $linecount files, $linecount dirs."

        linecount=$(wc -l < deletefiles-$module)
        linecount2=$(wc -l < deletedirs-$module)
        db2 "Stale:       $linecount files, $linecount2 dirs."

        linecount=$(wc -l < missingfiles-$module)
        linecount2=$(wc -l < missingdirs-$module)
        totallines=$((totallines+linecount+linecount2))
        db2 "Missing:     $linecount files, $linecount2 dirs."

    fi


    db2 Finished processing $module.  Added $totallines files and dirs to the transfer list.
done

if [[ ! -e master-transferlist ]]; then
    db2 No changed files.
    finish
fi

# rsync prefers sorted file lists and will complain if there are duplicates
sort -u master-transferlist > master-transferlist.sorted
linecount=$(wc -l < master-transferlist.sorted)
sep; sep
db2 Transferring $linecount files.

# Now we have a list of everything which has changed recently in every module
# we want, pass that to rsync (non recursive mode!) and it should transfer just
# the changed files without having to pull the entire huge file list.
extra=(--files-from master-transferlist.sorted)
do_rsync $REMOTE/$MASTERMODULE/ $DESTD extra

if [[ -s master-deletedirs ]]; then
    linecount=$(wc -l < master-deletedirs)

    if [[ -n $skipdelete ]]; then
        echo Not deleting  $linecount directories.  Delete list is:
        cat master-deletedirs
    else
        db2 Removing $linecount stale directories.
        for nuke in $(cat master-deletedirs); do
            if [[ -d "$DESTD/$nuke" ]]; then
                db4 Removing $nuke
                rm -rf "$DESTD/$nuke"
            fi
        done
    fi
else
    db2 No stale directories to delete.
fi

# If we had deleted the directories before making the list of stale files, we
# could save a lot of work here.  But since we have to delay the process, most
# of these will probably have been deleted above.
if [[ -s master-deletefiles ]]; then
    linecount=$(wc -l < master-deletefiles)

    if [[ -n $skipdelete ]]; then
        echo Not deleting $linecount stale files.  Delete list is:
        cat master-deletefiles
    else
        db2 Removing $linecount stale files.
        for nuke in $(cat master-deletefiles); do
            # Use xargs here to speed things up
            # (pushd $DESTD; xargs -i rm -f '{}'; popd) < master-deletefiles
            # At least, I think that works OK.
            db4 Removing $nuke
            rm -f "$DESTD/$nuke"
        done
    fi
else
    db2 No stale files to delete.
fi


if [[ -z $skipdelete ]]; then
    db2 Saving mirror time to $TIMEFILE
    if [[ -e $TIMEFILE ]]; then
        mv $TIMEFILE $TIMEFILE.prev
    fi
    echo LASTTIME=$starttime > $TIMEFILE

    if (( ? != 0 )); then
        (>&2 echo Problem saving timestamp file $TIMEFILE)
        exit 1
    fi
else
    db2 Skipping timestamp save.
fi

finish
